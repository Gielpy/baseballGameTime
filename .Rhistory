# gameTime.R
# downloads the massive MLB Gameday data.
# Author: grepo, based off work by apeecape
# Email: gregoryllpowell at gmail dot com
# Updated: April 7, 2015
# Version 0.1
# Version History
# # 0.1 ~ grab Pitch f/x data from MLB Gameday, specify date ranges (takes half a minute for a day's worth of data on my 2.5Ghz machine)
# Future Versions:
#
# downloading pitch f/x data from MLB website
# Get data from http://gd2.mlb.com/components/game/mlb/
# XML package http://www.omegahat.org/RSXML/shortIntro.html
# Perl script of same application by Mike Fast:
# http://fastballs.files.wordpress.com/2007/09/hack_28_parser_mikefast_test_pl.txt
# Less general R code from Erik Iverson of Blogistic Reflections:
# http://blogisticreflections.wordpress.com/2009/10/04/using-r-to-analyze-baseball-games-in-real-time/
# listing of pitch f/x tools by Baseball Analysts
# http://baseballanalysts.com/archives/2010/03/how_can_i_get_m.php
# downloadable pitch f/x database from Darrell Zimmerman
# http://www.wantlinux.net/category/baseball-data/
# required libraries:
library(XML)
# code for <game type> in game.xml (input game.type in code)
# "S" ~ spring training, "R" ~ regular season, "D" ~ Division Series
# "L" ~ League Championship Series "W" ~ World Series
# code for <game gameday_sw> in game.xml
# http://sports.dir.groups.yahoo.com/group/RetroSQL/message/320
# "N" ~ missing, no pitch info
# "Y" ~ standard w/ pitch locations
# "E" ~ w/ pitch f/x
# "P" ~ for 2010, whatever that's supposed to mean
# code for teams
# code for players
# code for gameday
# code for pitch type
# code for atbat type
# -----------------------------------------------------------
GameTime <- function(fileloc = "./elapsedTime.txt",
start.date = "2008-02-10", end.date = "2008-11-01",
URL.base = "http://gd2.mlb.com/components/game/mlb/",
game.type = "R",
elapsed.Time = "elapsedTime"
) {
# write initial variables on file
meta <- c("Year", "Month", "Day", "Home", "Away")
write(c(meta, elapsed.Time), file = fileloc,
ncol = length(c(elapsed.Time)) + length(meta), sep = " ")
# transfer date info
start.date <- as.POSIXlt(start.date); end.date <- as.POSIXlt(end.date);
diff.date <- as.numeric(difftime(end.date, start.date))
date.range <- as.POSIXlt(seq(start.date, by = "days",
length = 1 + diff.date))
for (i in 1:(diff.date+1)) {
year <- date.range[i]$year + 1900
month <- date.range[i]$mon + 1
day <- date.range[i]$mday
URL.date <- paste(URL.base, "year_", year, "/",
ifelse(month >= 10, "month_", "month_0"), month, "/",
ifelse(day >= 10, "day_", "day_0"), day, "/", sep = "")
# grab matchups for today
##     URL.scoreboard <- paste(URL.date, "miniscoreboard.xml", sep = "")
##     XML.scoreboard <- xmlInternalTreeParse(URL.scoreboard)
##     parse.scoreboard <- xpathSApply(XML.scoreboard, "//game[@gameday_link]",
##                                     xmlGetAttr, "gameday_link")
HTML.day <- htmlParse(URL.date)
parse.day <- xpathSApply(HTML.day, "//a[@*]", xmlGetAttr, "href")
parse.day <- parse.day[grep("^gid_*", parse.day)]
# if games exists today
if (length(parse.day) >= 1) {
# for each game
for (game in 1:length(parse.day)) {
print(game)
URL.game <- paste(URL.date, parse.day[game], sep = "")
HTML.game <- htmlParse(URL.game)
parse.game.exists <- xpathSApply(HTML.game, "//a[@*]", xmlGetAttr, "href")
# if rawboxscore.xml exists
if (sum(match(parse.game.exists, "rawboxscore.xml"), na.rm = T) > 0) {
# grab game type (regular season, etc.) and gameday type (pitch f/x, etc.)
XML.game <- xmlInternalTreeParse(paste(URL.game, "rawboxscore.xml", sep = ""))
parse.game <- sapply(c("game_type", "gameday_sw"), function (x)
xpathSApply(XML.game, "//boxscore[@*]", xmlGetAttr, x))
# if proper game type: "R" ~ regular season, "S" ~ spring, "D" ~ divison series
# "L" ~ league chamption series, "W" ~ world series
if (parse.game['game_type'] == game.type) {
# grab team names
parse.teams <- sapply(c("team_code"), function (x)
xpathSApply(XML.game, "//team[@*]", xmlGetAttr, x))
home <- parse.teams[1]; away <- parse.teams[2]
# if pitch f/x data exists
if (parse.game["gameday_sw"] == "E" | parse.game["gameday_sw"] == "P") {
# grab number of innings played
HTML.Ninnings <- htmlParse(paste(URL.game, "inning/", sep = ""))
parse.Ninnings <- xpathSApply(HTML.Ninnings, "//a[@*]", xmlGetAttr, "href")
parse.elapsedTime <- sapply(c("elapsed_time"), function(x)
xpathSApply(XML.game, "//boxscore[@*]", xmlGetAttr, x))
# check to see if atbat exists
if (length(parse.Ninnings) > 0) {
# write results
write(t(cbind(year, month, day, home, away,
parse.elapsedTime)), file = fileloc,
ncol = length(c(elapsed.Time)) + length(meta),
append = T, sep = " ")
}
}
}
}
}
}
}
}
# gameTime.R
# downloads the massive MLB Gameday data.
# Author: grepo, based off work by apeecape
# Email: gregoryllpowell at gmail dot com
# Updated: April 7, 2015
# Version 0.1
# Version History
# # 0.1 ~ grab Pitch f/x data from MLB Gameday, specify date ranges (takes half a minute for a day's worth of data on my 2.5Ghz machine)
# Future Versions:
#
# downloading pitch f/x data from MLB website
# Get data from http://gd2.mlb.com/components/game/mlb/
# XML package http://www.omegahat.org/RSXML/shortIntro.html
# Perl script of same application by Mike Fast:
# http://fastballs.files.wordpress.com/2007/09/hack_28_parser_mikefast_test_pl.txt
# Less general R code from Erik Iverson of Blogistic Reflections:
# http://blogisticreflections.wordpress.com/2009/10/04/using-r-to-analyze-baseball-games-in-real-time/
# listing of pitch f/x tools by Baseball Analysts
# http://baseballanalysts.com/archives/2010/03/how_can_i_get_m.php
# downloadable pitch f/x database from Darrell Zimmerman
# http://www.wantlinux.net/category/baseball-data/
# required libraries:
library(XML)
# code for <game type> in game.xml (input game.type in code)
# "S" ~ spring training, "R" ~ regular season, "D" ~ Division Series
# "L" ~ League Championship Series "W" ~ World Series
# code for <game gameday_sw> in game.xml
# http://sports.dir.groups.yahoo.com/group/RetroSQL/message/320
# "N" ~ missing, no pitch info
# "Y" ~ standard w/ pitch locations
# "E" ~ w/ pitch f/x
# "P" ~ for 2010, whatever that's supposed to mean
# code for teams
# code for players
# code for gameday
# code for pitch type
# code for atbat type
# -----------------------------------------------------------
GameTime <- function(fileloc = "./elapsedTime2008.txt",
start.date = "2008-02-10", end.date = "2008-11-01",
URL.base = "http://gd2.mlb.com/components/game/mlb/",
game.type = "R",
elapsed.Time = "elapsedTime"
) {
# write initial variables on file
meta <- c("Year", "Month", "Day", "Home", "Away")
write(c(meta, elapsed.Time), file = fileloc,
ncol = length(c(elapsed.Time)) + length(meta), sep = " ")
# transfer date info
start.date <- as.POSIXlt(start.date); end.date <- as.POSIXlt(end.date);
diff.date <- as.numeric(difftime(end.date, start.date))
date.range <- as.POSIXlt(seq(start.date, by = "days",
length = 1 + diff.date))
for (i in 1:(diff.date+1)) {
year <- date.range[i]$year + 1900
month <- date.range[i]$mon + 1
day <- date.range[i]$mday
URL.date <- paste(URL.base, "year_", year, "/",
ifelse(month >= 10, "month_", "month_0"), month, "/",
ifelse(day >= 10, "day_", "day_0"), day, "/", sep = "")
# grab matchups for today
##     URL.scoreboard <- paste(URL.date, "miniscoreboard.xml", sep = "")
##     XML.scoreboard <- xmlInternalTreeParse(URL.scoreboard)
##     parse.scoreboard <- xpathSApply(XML.scoreboard, "//game[@gameday_link]",
##                                     xmlGetAttr, "gameday_link")
HTML.day <- htmlParse(URL.date)
parse.day <- xpathSApply(HTML.day, "//a[@*]", xmlGetAttr, "href")
parse.day <- parse.day[grep("^gid_*", parse.day)]
# if games exists today
if (length(parse.day) >= 1) {
# for each game
for (game in 1:length(parse.day)) {
print(game)
URL.game <- paste(URL.date, parse.day[game], sep = "")
HTML.game <- htmlParse(URL.game)
parse.game.exists <- xpathSApply(HTML.game, "//a[@*]", xmlGetAttr, "href")
# if rawboxscore.xml exists
if (sum(match(parse.game.exists, "rawboxscore.xml"), na.rm = T) > 0) {
# grab game type (regular season, etc.) and gameday type (pitch f/x, etc.)
XML.game <- xmlInternalTreeParse(paste(URL.game, "rawboxscore.xml", sep = ""))
parse.game <- sapply(c("game_type", "gameday_sw"), function (x)
xpathSApply(XML.game, "//boxscore[@*]", xmlGetAttr, x))
# if proper game type: "R" ~ regular season, "S" ~ spring, "D" ~ divison series
# "L" ~ league chamption series, "W" ~ world series
if (parse.game['game_type'] == game.type) {
# grab team names
parse.teams <- sapply(c("team_code"), function (x)
xpathSApply(XML.game, "//team[@*]", xmlGetAttr, x))
home <- parse.teams[1]; away <- parse.teams[2]
# if pitch f/x data exists
if (parse.game["gameday_sw"] == "E" | parse.game["gameday_sw"] == "P") {
# grab number of innings played
HTML.Ninnings <- htmlParse(paste(URL.game, "inning/", sep = ""))
parse.Ninnings <- xpathSApply(HTML.Ninnings, "//a[@*]", xmlGetAttr, "href")
parse.elapsedTime <- sapply(c("elapsed_time"), function(x)
xpathSApply(XML.game, "//boxscore[@*]", xmlGetAttr, x))
# check to see if atbat exists
if (length(parse.Ninnings) > 0) {
# write results
write(t(cbind(year, month, day, home, away,
parse.elapsedTime)), file = fileloc,
ncol = length(c(elapsed.Time)) + length(meta),
append = T, sep = " ")
}
}
}
}
}
}
}
}
GameTime()
setwd('baseball')
setwd("~/Baseball")
year2014<-read.csv('2014 data.csv', header=T)
type(year2014)
typeof(year2014)
year2013<-read.csv('2013 data.csv', header=T)
year2013.dt<-data.table(year2013)
library(data.table)
install.packages("data.table")
library(data.table)
year2013.dt<-data.table(year2013)
year2013.dt
year2014.dt<-data.table(year2014)
years.dt<-merge(year2013.dt, year2014.dt)
years.dt<-merge(year2013.dt, year2014.dt, by=c('Year','Month','Day','Home','Away','elapsedTime','gameNumber','gameTime','runningAvg'))
years.dt
years.dt<-merge(year2013.dt, year2014.dt, by=gameTime)
years.dt<-merge(year2013.dt, year2014.dt, by='gameTime')
install.packages("plyr")
library(plyr)
mydata = ldply(list.files(pattern = “csv”), function(filename) {
dum = read.table(filename)
#If you want to add the filename as well on the column
dum$filename = filename
return(dum)
})
test<-mapply(year2013, year2014, FUN=list, SIMPLIFY=FALSE)
test
head(test)
foot(test)
body(test)
typeof(test)
head(test)
summarySE(test, measurevar='gameTime', groupvars=c('Home'))
library(bear)
summarySE(test, measurevar='gameTime', groupvars=c('Home'))
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.delim)
myfiles
typeof(myfiles)
head(myfiles)
summary(myfiles)
load_data <- function(path) {
files <- dir(path, pattern = '\\.csv', full.names = TRUE)
tables <- lapply(files, read.csv)
do.call(rbind, tables)
}
load_data
test<-load_data('year')
test<-load_data('Baseball')
test<-load_data(Baseball)
test<-load_data('/Baseball')
test<-load_data('~/Baseball')
head(test)
summary(test)
View(test)
summarySE(test, measurevar='gameTime', groupvars=c('Home'))
ggplot(test, aes(x=Away, y=gameTime))+
library(ggplot2)
ggplot(test, aes(x=Away, y=gameTime))+
geom_boxplot()
ggplot(test, aes(x=Away, y=gameTime, group=Year))+
geom_boxplot()
ggplot(test, aes(x=Away, y=gameTime, fill=Year))+
geom_boxplot()
ggplot(test, aes(x=Away, y=gameTime))+
geom_boxplot(fill=Year)
head(test)
ggplot(test, aes(x=Away, y=gameTime))+
geom_boxplot(fill='Year')
ggplot(test, aes(x=Away, y=gameTime))+
geom_boxplot(group='Year')
summarySE(test, measurevar='gameTime', groupvars=c('Year'))
ggplot(test, aes(x=gameNumber, y=runningAvg, group=Year))+
geom_line()
ggplot(test, aes(x=gameNumber, y=runningAvg, group=Year))+
geom_line(group=Year)
ggplot(test, aes(x=gameNumber, y=runningAvg, group=Year))+
geom_line(group='Year')
ggplot(test, aes(x=gameNumber, y=runningAvg, group=Year, color=group))+
geom_line()
ggplot(test, aes(x=gameNumber, y=runningAvg, group=Year, color=Year))+
geom_line()
